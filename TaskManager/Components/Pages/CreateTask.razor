@page "/create"
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject TaskService TaskService
@inject userIdService UserIdService
@inject AppDbContext appDbContext

<h3 class="mb-4">üìù Create New Task</h3>
@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}
<EditForm Model="@newTask" OnValidSubmit="HandleValidSubmit" FormName="CreateTaskForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Title</label>
        <InputText class="form-control" @bind-Value="newTask.Title" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value="newTask.Description" />
    </div>

    <div class="mb-3">
        <label class="form-label">Category</label>
        <InputSelect class="form-select" @bind-Value="selectedCategoryId">
            <option value="">-- Select Category --</option>
            @foreach (var cat in categories)
            {
                <option value="@cat.CategoryId">@cat.Name</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Due Date</label>
        <InputDate class="form-control" @bind-Value="newTask.DueDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
    </div>

    <div class="mb-3">
        <label class="form-label">Status</label>
        <InputSelect class="form-select" @bind-Value="newTask.TaskStatus">
            @foreach (var status in Enum.GetValues<TaskStatus>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Priority</label>
        <InputSelect class="form-select" @bind-Value="newTask.PriorityLevel">
            @foreach (var priority in Enum.GetValues<PriorityLevel>())
            {
                <option value="@priority">@priority</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-success me-2" disabled="@(!string.IsNullOrWhiteSpace(SuccessMessage))">
        @(string.IsNullOrWhiteSpace(SuccessMessage) ? "Create Task" : "Processing...")
    </button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private TaskItem newTask = new();
    private List<Category>? categories = new();
    private int selectedCategoryId;
    private string? SuccessMessage;

    protected override async Task OnInitializedAsync()
    {
        categories = await appDbContext.Categories.ToListAsync<Category>();
        newTask.DueDate = DateTime.Today;
    }
    private async Task HandleValidSubmit()
    {
        newTask.AppUserId = UserIdService.loggedUserId;
        newTask.Category = categories.FirstOrDefault(c => c.CategoryId == selectedCategoryId);
        await TaskService.AddAsync(newTask);
        SuccessMessage = "Task Created Successfully!. Redirecting in 3 seconds";
        StateHasChanged();
        await Task.Delay(3000);
        NavManager.NavigateTo("/dashboard");
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/dashboard");
    }

    public enum PriorityLevel { Low = 0, Medium = 1, High = 2 }
    public enum TaskStatus { Pending = 0, InProgress = 1, Completed = 2 }
}