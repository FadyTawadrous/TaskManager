@page "/dashboard"
@using Microsoft.EntityFrameworkCore

@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject TaskService TaskService
@inject userIdService UserIdService
@inject IJSRuntime JS
@inject AppDbContext appDbContext

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>üìã Task Dashboard</h3>
    <button class="btn btn-outline-secondary" @onclick="Logout">
        <i class="bi bi-box-arrow-right"></i> Logout
    </button>
</div>

@if (loggedUserId <= 0)
{
    <div class="alert alert-danger">Oops... You'r not logged in.
        Please login first, Redirecting in 4 seconds.</div>
}
else
{
    <h4>Hello, @currentUser?.Name</h4>
    @if (tasks is null)
    {
        <p>Loading tasks...</p>
    }
    else if (!tasks.Any())
    {
        <div class="alert alert-info">
            No tasks yet. <a href="/create">Create your first task</a> to get started!
        </div>
    }
    else
    {
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var mytask in tasks)
                {
                    <tr>
                        <td>@mytask.Title</td>
                        <td>@mytask.Description</td>
                        <td>@mytask.Category.Name</td>
                        <td>@mytask.DueDate.ToShortDateString()</td>
                        <td>
                            <span class="@GetStatusClass((int)mytask.TaskStatus)">
                                @mytask.TaskStatus
                            </span>
                        </td>
                        <td>
                            <span class="@GetPriorityClass((int)mytask.PriorityLevel)">
                                @mytask.PriorityLevel
                            </span>

                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => EditTask(mytask.TaskItemId)">‚úèÔ∏è
                                Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(mytask.TaskItemId)">üóëÔ∏è Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}


@code {
    private List<TaskItem>? tasks;
    private int loggedUserId;
    private AppUser? currentUser = new();

    protected override async Task OnInitializedAsync()
    {
        loggedUserId = UserIdService.loggedUserId;
        // Console.WriteLine($"Retrieved userId: {loggedUserId}");
        try
        {
            tasks = await TaskService.GetAllAsync(loggedUserId);
            currentUser = await appDbContext.AppUsers.FirstOrDefaultAsync(u => u.AppUserId == loggedUserId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            tasks = new List<TaskItem>();
        }
        finally
        {
            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && loggedUserId <= 0)
        {
            StateHasChanged();
            await Task.Delay(4000);
            NavManager.NavigateTo("/");
            return;
        }
    }
    private void Logout()
    {
        UserIdService.loggedUserId = 0;
        NavManager.NavigateTo("/");
    }
    private async Task DeleteTask(int id)
    {
        // Console.WriteLine("Delete button");
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
        if (confirmed)
        {

            await TaskService.DeleteAsync(id);
            tasks = await TaskService.GetAllAsync(loggedUserId); // Refresh list
            StateHasChanged();
        }
    }

    private void EditTask(int id)
    {
        // Navigate to edit page (if implemented)
        // NavManager.NavigateTo($"/tasks/edit/{id}");
    }

    private string GetStatusClass(int status) => status switch
    {
        0 => "badge bg-secondary",
        1 => "badge bg-warning text-dark",
        2 => "badge bg-success",
        _ => "badge bg-light"
    };

    private string GetPriorityClass(int priority) => priority switch
    {
        // 0 = Low, 1 = Medium, 2 = High (adjust as your enum or values dictate)
        0 => "badge bg-success", // low = green
        1 => "badge bg-warning text-dark", // medium = yellow
        2 => "badge bg-danger", // high = red
        _ => "badge bg-secondary" // fallback
    };
}