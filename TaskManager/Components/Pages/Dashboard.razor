@page "/dashboard"
@using Microsoft.EntityFrameworkCore
@using TaskManager.Components.Pages

@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject TaskService TaskService
@inject userIdService UserIdService
@inject IJSRuntime JS
@inject AppDbContext appDbContext

<div class="d-flex justify-content-between align-items-center mb-4">
    <h5>üìã Tasks Dashboard</h5>

    <div class="d-flex gap-2">
        <button class="btn btn-outline-info" @onclick="GenerateReport">
            <i class="bi bi-file-earmark-text"></i> Generate Report
        </button>
        <button class="btn btn-outline-info fw-bold border-2 shadow-sm" @onclick="GroupTaskByPriority">
            <i class="bi bi-diagram-3-fill"></i> Group Tasks By Priority
        </button>
        <button class="btn btn-success" @onclick="NavigateToCreate">
            <i class="bi bi-plus-circle"></i> Create Task
        </button>
        <button class="btn btn-outline-secondary" @onclick="Logout">
            <i class="bi bi-box-arrow-right"></i> Logout
        </button>
    </div>
</div>

@* Filteration Box *@
<div class="position-sticky top-0 bg-white z-1">
    <div class="card mb-4 p-3 shadow-sm">
        <div class="row g-3">
            <div class="col-md-2">
                <InputText class="form-control" placeholder="üîé Search by Title" @oninput="HandleSearchInput"
                    @bind-Value="searchTerm" />
            </div>

            <div class="col-md-2">
                <InputSelect class="form-select" @bind-Value="selectedCategoryId">
                    <option value="">All Categories</option>
                    @foreach (var cat in categories)
                    {
                        <option value="@cat.CategoryId">@cat.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-2">
                <InputSelect class="form-select" @bind-Value="filterOverdue">
                    <option value="">All</option>
                    <option value="True">Overdue</option>
                    <option value="False">On Time</option>
                </InputSelect>
            </div>

            <div class="col-md-2">
                <InputSelect class="form-select" @bind-Value="selectedStatus">
                    <option value="">All Statuses</option>
                    @foreach (var s in Enum.GetValues<TaskStatus>())
                    {
                        <option value="@s">@s</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-2">
                <InputSelect class="form-select" @bind-Value="selectedPriority">
                    <option value="">All Priorities</option>
                    @foreach (var p in Enum.GetValues<PriorityLevel>())
                    {
                        <option value="@p">@p</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-2 d-grid">
                <button class="btn btn-outline-dark " @onclick="ResetFilters">
                    <i class="bi bi-x-circle"></i> Reset Filters
                </button>
            </div>

        </div>
    </div>
</div>
@* End Filtration Box *@

@if (loggedUserId <= 0)
{
    <div class="alert alert-danger">Oops... You'r not logged in.
        Please login first, Redirecting in 4 seconds.</div>
}
else
{
    <h4>Hello, @currentUser?.Name</h4>
    <div class="alert alert-secondary">
        ‚è±Ô∏è Average Completion Time: <strong>@GetAverageCompletionTime()</strong>
    </div>
    @if (tasks is null)
    {
        <p>Loading tasks...</p>
    }
    else if (!tasks.Any())
    {
        <div class="alert alert-info">
            No tasks yet. <a href="/create">Create your first task</a> to get started!
        </div>
    }
    else
    {
        @if (groupByPriority)
        {
            @* Render grouped tables *@
            @foreach (var group in GroupedTasksByPriority)
            {
                <h5 class="mt-4">
                    <span class="@GetPriorityClass((int)group.Key)">
                        @group.Key Priority
                    </span>
                </h5>

                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Category</th>
                            <th>Due Date</th>
                            <th>Is Overdue</th>
                            <th>Status</th>
                            <th>Completed At</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var mytask in group.Value)
                        {
                            <tr class="@(mytask.IsOverdue ? "table-danger" : "")">
                                <td>@mytask.Title</td>
                                <td>@mytask.Description</td>
                                <td>@mytask.Category.Name</td>
                                <td>@mytask.DueDate.ToShortDateString()</td>
                                <td>
                                    @if (mytask.IsOverdue)
                                    {
                                        <span class="badge bg-danger">Overdue</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">On Time</span>
                                    }
                                </td>
                                <td>
                                    <span class="@GetStatusClass((int)mytask.TaskStatus)">
                                        @mytask.TaskStatus
                                    </span>
                                </td>
                                <td>@(mytask.CompletedAt?.ToShortDateString() ?? "Not completed")</td>
                                <td>
                                    <button class="btn btn-sm btn-primary me-2" @onclick="() => EditTask(mytask.TaskItemId)">‚úèÔ∏è
                                        Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(mytask.TaskItemId)">üóëÔ∏è Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
        else
        {
            @* Render flat table *@
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Category</th>
                        <th>Due Date</th>
                        <th>Is Overdue</th>
                        <th>Status</th>
                        <th>Priority</th>
                        <th>Completed At</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var mytask in PagedTasks)
                    {
                        <tr class="@(mytask.IsOverdue ? "table-danger" : "")">
                            <td>@mytask.Title</td>
                            <td>@mytask.Description</td>
                            <td>@mytask.Category.Name</td>
                            <td>@mytask.DueDate.ToShortDateString()</td>
                            <td>
                                @if (mytask.IsOverdue)
                                {
                                    <span class="badge bg-danger" title="Due date has passed and task is not completed">Overdue</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">On Time</span>
                                }
                            </td>
                            <td>
                                <span class="@GetStatusClass((int)mytask.TaskStatus)">
                                    @mytask.TaskStatus
                                </span>
                            </td>
                            <td>
                                <span class="@GetPriorityClass((int)mytask.PriorityLevel)">
                                    @mytask.PriorityLevel
                                </span>

                            </td>
                            <td>@(mytask.CompletedAt?.ToShortDateString() ?? "Not completed")</td>
                            <td>
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => EditTask(mytask.TaskItemId)">‚úèÔ∏è
                                    Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(mytask.TaskItemId)">üóëÔ∏è Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <nav>
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                    </li>
                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                        </li>
                    }
                    <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                    </li>
                </ul>
            </nav>
        }
    }
}


@code {
    private List<TaskItem>? tasks;
    private int loggedUserId;
    private AppUser? currentUser = new();

    // filteration fields
    private string searchTerm = "";
    private PriorityLevel? selectedPriority;
    private TaskStatus? selectedStatus;
    private int? selectedCategoryId;
    private string? filterOverdue = string.Empty;
    private List<Category> categories = new();
    private List<TaskItem>? completedTasks = new();
    private int currentPage = 1;

    // Pagination: 10 tasks per page
    private int pageSize = 10;
    private int TotalPages => (int)Math.Ceiling((double)(FilteredTasks.Count()) / pageSize);
    private IEnumerable<TaskItem> PagedTasks => FilteredTasks
    .Skip((currentPage - 1) * pageSize)
    .Take(pageSize);

    private bool groupByPriority = false;

    private void GroupTaskByPriority()
    {
        groupByPriority = !groupByPriority;
    }
    private void ChangePage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        loggedUserId = UserIdService.loggedUserId;
        // Console.WriteLine($"Retrieved userId: {loggedUserId}");
        try
        {
            tasks = await TaskService.GetAllAsync(loggedUserId);
            currentUser = await appDbContext.AppUsers.FirstOrDefaultAsync(u => u.AppUserId == loggedUserId);
            categories = await appDbContext.Categories.OrderBy(c => c.Name).ToListAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            tasks = new List<TaskItem>();
        }
        finally
        {
            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && loggedUserId <= 0)
        {
            StateHasChanged();
            await Task.Delay(4000);
            NavManager.NavigateTo("/");
            return;
        }
    }
    private string GetAverageCompletionTime()
    {
        if (tasks == null || tasks?.Count == 0)
        {
            return "N/A";
        }

        completedTasks = tasks?
        .Where(t => t.CompletedAt.HasValue && t.CreatedAt != null)
        .ToList();

        if (completedTasks?.Count == 0 || completedTasks == null)
        {
            return "N/A";
        }

        TimeSpan totalDuration = TimeSpan.Zero;

        foreach (var task in completedTasks)
        {
            totalDuration += task.CompletedAt.Value - task.CreatedAt;
        }

        var averageDuration = TimeSpan.FromTicks(totalDuration.Ticks / completedTasks.Count);
        return $"{averageDuration.TotalDays:F1} days";
    }
    private void Logout()
    {
        UserIdService.loggedUserId = 0;
        NavManager.NavigateTo("/");
    }
    private void NavigateToCreate()
    {
        NavManager.NavigateTo("/create");
    }
    private async Task DeleteTask(int id)
    {
        // Console.WriteLine("Delete button");
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
        if (confirmed)
        {
            await TaskService.DeleteAsync(id);
            tasks = await TaskService.GetAllAsync(loggedUserId); // Refresh list
            StateHasChanged();
        }
    }
    private void EditTask(int id)
    {
        NavManager.NavigateTo($"/edit/{id}");
    }

    public enum PriorityLevel { Low = 0, Medium = 1, High = 2 }
    public enum TaskStatus { Pending = 0, InProgress = 1, Completed = 2 }

    private string GetStatusClass(int status) => status switch
    {
        0 => "badge bg-secondary",
        1 => "badge bg-warning text-dark",
        2 => "badge bg-success",
        _ => "badge bg-light"
    };

    private string GetPriorityClass(int priority) => priority switch
    {
        // 0 = Low, 1 = Medium, 2 = High (adjust as your enum or values dictate)
        0 => "badge bg-success", // low = green
        1 => "badge bg-warning text-dark", // medium = yellow
        2 => "badge bg-danger", // high = red
        _ => "badge bg-secondary" // fallback
    };

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
    }

    private IEnumerable<TaskItem> FilteredTasks => tasks?
    .Where(t => string.IsNullOrWhiteSpace(searchTerm) || t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
    .Where(t => !selectedPriority.HasValue || (int)t.PriorityLevel == (int)selectedPriority)
    .Where(t => !selectedStatus.HasValue || (int)t.TaskStatus == (int)selectedStatus)
    .Where(t => !selectedCategoryId.HasValue || t.Category.CategoryId == selectedCategoryId)
    .Where(t => string.IsNullOrWhiteSpace(filterOverdue) || t.IsOverdue.ToString() == filterOverdue)
    .OrderBy(t => t.DueDate)
    ?? Enumerable.Empty<TaskItem>();

    private void ResetFilters()
    {
        searchTerm = "";
        selectedPriority = null;
        selectedStatus = null;
        selectedCategoryId = null;
        filterOverdue = string.Empty;
        currentPage = 1;
    }

    private Dictionary<Dashboard.PriorityLevel, List<TaskItem>> GroupedTasksByPriority =>
    FilteredTasks
    .GroupBy(t => (Dashboard.PriorityLevel)t.PriorityLevel) // cast if needed
    .OrderByDescending(g => g.Key)
    .ToDictionary(g => g.Key, g => g.ToList());
    private void GenerateReport()
    {
        NavManager.NavigateTo($"report");
    }
}