@page "/login"
@using Blazored.LocalStorage;
@using System.ComponentModel.DataAnnotations;

@rendermode InteractiveServer
@inject AuthenticationService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />

    <InputText @bind-Value="loginModel.Email" placeholder="Email" class="form-control" id="email" name="email" />
    <ValidationMessage For="@(() => loginModel.Email)" />

    <InputText @bind-Value="loginModel.Password" placeholder="Password" type="password" class="form-control"
        id="password" name="password" />
    <ValidationMessage For="@(() => loginModel.Password)" />

    <button type="submit" class="btn btn-primary mt-2" disabled="@isSubmitting">
        @(isSubmitting ? "Logging in..." : "Login")
    </button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? ErrorMessage;
    private bool isSubmitting = false;
    private async Task HandleLogin()
    {
        Console.WriteLine("Entered metheod");
        isSubmitting = true;
        try
        {
            var user = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            if (user == null)
            {
                Console.WriteLine("User is null");
                ErrorMessage = "Invalid email or password.";
                StateHasChanged();
                return;
            }

            Console.WriteLine("User found");
            await LocalStorage.SetItemAsync("userId", user.AppUserId);
            ErrorMessage = null;
            NavManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            ErrorMessage = "An unexpected error occurred.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}