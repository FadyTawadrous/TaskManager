@page "/"
@using Blazored.LocalStorage;
@using System.ComponentModel.DataAnnotations;

@rendermode InteractiveServer
@inject AuthenticationService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject userIdService UserIdService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Welcome, Login or Sign up</h3>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" id="email" name="email"
                                placeholder="Enter your email" autofocus />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText @bind-Value="loginModel.Password" class="form-control" id="password"
                                name="password" type="password" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
                            @(isSubmitting ? "Logging in..." : "Login")
                        </button>

                        <div class="text-center mt-3">
                            <a class="btn btn-outline-secondary" href="/register">Sign up</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? ErrorMessage;
    private bool isSubmitting = false;
    protected override void OnInitialized()
    {
        UserIdService.loggedUserId = 0;
    }
    private async Task HandleLogin()
    {
        isSubmitting = true;
        try
        {
            var user = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            if (user == null)
            {
                ErrorMessage = "Invalid email or password.";
                StateHasChanged();
                return;
            }

            await LocalStorage.SetItemAsync("userId", user.AppUserId);
            ErrorMessage = null;
            UserIdService.loggedUserId = user.AppUserId;
            NavManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            ErrorMessage = "An unexpected error occurred.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}