@page "/register"
@using System.ComponentModel.DataAnnotations;

@rendermode InteractiveServer
@inject AuthenticationService AuthService
@inject NavigationManager NavManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Sign up</h3>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success">@SuccessMessage</div>
                    }

                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" FormName="RegistrationForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="registerModel.Name" name="name"
                                placeholder="Enter your name" autofocus="true" />
                            <ValidationMessage For="@(() => registerModel.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="registerModel.Email" name="email"
                                placeholder="Enter your email" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control"
                                @bind-Value="registerModel.Password" name="password"
                                placeholder="Enter your password" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText id="confirmPassword" type="password" class="form-control"
                                @bind-Value="registerModel.ConfirmPassword" name="confirmPassword"
                                placeholder="Confirm Password" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
                            @(isSubmitting ? "Processing..." : "Register")
                        </button>

                        <div class="text-center mt-3">
                            <a class="btn btn-outline-secondary" href="/login">Login</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string? ErrorMessage;
    private bool isSubmitting = false;
    private string? SuccessMessage;
    private async Task HandleRegister()
    {
        isSubmitting = true;
        try
        {
            bool isCreated = await AuthService.RegisterAsync(registerModel.Name, registerModel.Email.Trim().ToLower(),
            registerModel.Password);
            if (isCreated)
            {
                ErrorMessage = null;
                // show that the user is created
                SuccessMessage = "Account created successfully!";
                StateHasChanged();
                await Task.Delay(3000); // optional pause
                SuccessMessage = null;
                NavManager.NavigateTo("/");
                return;
            }
            ErrorMessage = "Email already exists";
            SuccessMessage = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            ErrorMessage = "An unexpected error occurred.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class RegisterModel
    {
        [Required]
        public string Name { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [MinLength(6)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
}